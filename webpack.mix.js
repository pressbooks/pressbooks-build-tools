// Boilerplate webpack.mix.js configuration for Pressbooks plugins & themes
// Used to test that, at the very least, .js and .scss files compile

let mix = require( 'laravel-mix' );
let path = require( 'path' );
let normalizeNewline = require( 'normalize-newline' );
let fs = require( 'fs' );

/*
 |--------------------------------------------------------------------------
 | Mix Asset Management
 |--------------------------------------------------------------------------
 |
 | Mix provides a clean, fluent API for defining some Webpack build steps
 | for your Laravel application. By default, we are compiling the Sass
 | file for your application, as well as bundling up your JS files.
 |
 */

const assets = 'assets';
const dist = `${assets}/dist`;
const templates = 'templates';

// BrowserSync
mix.browserSync( {
	host: 'localhost',
	proxy: 'https://pressbooks.test/wp-login.php',
	port: 3100,
	files: [
		'*.php',
		`${templates}/**/*.php`,
		`${dist}/styles/*.css`,
		`${dist}/scripts/*.js`,
	],
} );

// Normalize Newlines
const normalizeNewlines = dir => {
	fs.readdirSync( dir ).forEach( function ( file ) {
		file = path.join( dir, file );
		fs.readFile( file, 'utf8', function ( err, buffer ) {
			// eslint-disable-next-line no-console
			if ( err ) return console.log( err );
			buffer = normalizeNewline( buffer );
			fs.writeFile( file, buffer, 'utf8', function ( err ) {
				// eslint-disable-next-line no-console
				if ( err ) return console.log( err );
			} );
		} );
	} );
};

mix
	.version()
	.options( { processCssUrls: false } )
	.setPublicPath( path.join( 'assets', 'dist' ) )
	.js( 'assets/src/scripts/test.js', 'assets/dist/scripts/' )
	.scripts( 'assets/src/scripts/test.js', 'assets/dist/scripts/test2.js' )
	.sass( 'assets/src/styles/test.scss', 'assets/dist/styles/' )
	.then( () => {
		normalizeNewlines( `${dist}/scripts/` );
		normalizeNewlines( `${dist}/styles/` );
	} );

// Full API
// mix.js(src, output); <-- compile (ES2015 syntax, modules, ...) !and! minify
// mix.scripts(src, output); <-- just minify
// mix.react(src, output); <-- Identical to mix.js(), but registers React Babel compilation.
// mix.preact(src, output); <-- Identical to mix.js(), but registers Preact compilation.
// mix.coffee(src, output); <-- Identical to mix.js(), but registers CoffeeScript compilation.
// mix.ts(src, output); <-- TypeScript support. Requires tsconfig.json to exist in the same folder as webpack.mix.js
// mix.extract(vendorLibs);
// mix.sass(src, output);
// mix.less(src, output);
// mix.stylus(src, output);
// mix.postCss(src, output, [require('postcss-some-plugin')()]);
// mix.browserSync('my-site.test');
// mix.combine(files, destination);
// mix.babel(files, destination); <-- Identical to mix.combine(), but also includes Babel compilation.
// mix.copy(from, to);
// mix.copyDirectory(fromDir, toDir);
// mix.minify(file);
// mix.sourceMaps(); // Enable sourcemaps
// mix.version(); // Enable versioning.
// mix.disableNotifications();
// mix.setPublicPath('path/to/public');
// mix.setResourceRoot('prefix/for/resource/locators');
// mix.autoload({}); <-- Will be passed to Webpack's ProvidePlugin.
// mix.webpackConfig({}); <-- Override webpack.config.js, without editing the file directly.
// mix.babelConfig({}); <-- Merge extra Babel configuration (plugins, etc.) with Mix's default.
// mix.then(function () {}) <-- Will be triggered each time Webpack finishes building.
// mix.override(function (webpackConfig) {}) <-- Will be triggered once the webpack config object has been fully generated by Mix.
// mix.dump(); <-- Dump the generated webpack config object to the console.
// mix.extend(name, handler) <-- Extend Mix's API with your own components.
// mix.options({
//   extractVueStyles: false, // Extract .vue component styling to file, rather than inline.
//   globalVueStyles: file, // Variables file to be imported in every component.
//   processCssUrls: true, // Process/optimize relative stylesheet url()'s. Set to false, if you don't want them touched.
//   purifyCss: false, // Remove unused CSS selectors.
//   terser: {}, // Terser-specific options. https://github.com/webpack-contrib/terser-webpack-plugin#options
//   postCss: [] // Post-CSS options: https://github.com/postcss/postcss/blob/master/docs/plugins.md
// });
